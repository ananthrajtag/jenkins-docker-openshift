{{- $root := . -}}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    {{- include "jenkins-openshift.labels" . | nindent 4 }}
  name: jenkins-casc
data:
  jenkins.yaml: |
    jenkins:
      systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code Plugin\n\n"
      clouds:
      - kubernetes:
          name: "openshift"
          serverUrl: https://kubernetes.default:443
          jenkinsUrl: http://{{ template "jenkins-openshift.fullname" . }}:{{.Values.master.servicePort}}{{ default "" .Values.master.jenkinsUriPrefix }}
          jenkinsTunnel: {{ template "jenkins-openshift.fullname" . }}-agent:{{ .Values.master.slaveListenerPort }}
          namespace: {{ .Release.Namespace }}
          # credentialsId: 1a12dfa4-7fc5-47a7-aa17-cc56572a41c7
          containerCapStr: "100"
          retentionTimeout: 2
          skipTlsVerify: false
          addMasterProxyEnvVars: true
          {{- if .Values.agent.enabled }}
          templates:
          {{- range $pkey, $pval := .Values.agent.podTemplates }}
          - name: {{ required "PodTemplate name is required!" $pval.name }}
            label: {{ required "PodTemplate label is required!" $pval.label }}
            {{- if $pval.inheritFrom }}
            inheritFrom: {{ $pval.inheritFrom }}
            {{- end }}
            instanceCap: 10
            idleMinutes: 15
            {{- if $pval.serviceAccount }}
            serviceAccount: {{ $pval.serviceAccount }}
            {{- end }}
            {{- if $pval.nodeSelector }}
            nodeSelector:
            {{- range $key, $value := $pval.nodeSelector }}
              {{- $key }}: {{ $value }}
            {{- end }}
            {{- end }}
            {{- if $pval.volumes }}
            volumes:
            {{- range $index, $pvolume := $pval.volumes }}
            - {{ $pvolume.type }}:
              mountPath: {{ $pvolume.mountPath }}
              {{- if eq "hostPathVolume" $pvolume.type }}
              hostPath: {{ $pvolume.hostPath }}
              {{- else if eq "configMapVolume" $pvolume.type }}
              configMapName: {{ $pvolume.configMapName }}
              {{- else if eq "secretVolume" $pvolume.type }}
              secretName: {{ $pvolume.secretName }}
              {{- else if eq "persistentVolumeClaim" $pvolume.type }}
              claimName: {{ $pvolume.claimName }}
              readOnly: {{ default false $pvolume.readOnly }}
              {{- end }}
            {{- end}}
            {{- end}}
            {{- /* It is possible to not have containers when it is just inheriting many podTemplate */ -}}
            {{- if $pval.containers }}
            containers:
            {{- range $ckey, $cval := $pval.containers }}
            - name: {{ default "jnlp" $cval.name | lower }}
              image: {{ $root.Values.global.image.registry }}/{{ $cval.image }}:{{ default "latest" $cval.imageTag }}
              privileged: {{ default false $cval.privileged }}
              alwaysPullImage: {{ default true $cval.alwaysPullImage }}
              workingDir: /tmp
              {{ if $cval.command -}}
              command: {{ $cval.command | quote }}
              {{ end }}
              {{- /* JCasC uses ^ to escape environment variable substitution: https://github.com/jenkinsci/configuration-as-code-plugin/blob/master/README.md#handling-secrets */ -}}
              args: {{ default "^${computer.jnlpmac} ^${computer.name}" $cval.args | quote }}
              ttyEnabled: {{ default false $cval.ttyEnabled }}
              {{- if $cval.resources.requestCpu }}
              resourceRequestCpu: {{ $cval.resources.requestCpu }}
              {{- end }}
              {{- if $cval.resources.requestMemory }}
              resourceRequestMemory: {{ $cval.resources.requestMemory }}
              {{- end }}
              {{- if $cval.resources.limitCpu }}
              resourceLimitCpu: {{ $cval.resources.limitCpu }}
              {{- end }}
              {{- if $cval.resources.limitMemory }}
              resourceLimitMemory: {{ $cval.resources.limitMemory }}
              {{- end }}
              {{- if $cval.env }}
              envVars:
              {{- range $cekey, $ceval := $cval.env }}
              - envVar: 
                  key: {{ $cekey }}
                  value: {{ $ceval }}
              {{- end }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- if $pval.env }}
            envVars:
            {{- range $ekey, $eval := $pval.env }}
            - envVar: 
                key: {{ $ekey }}
                value: {{ $eval }}
            {{- end }}
            {{- end }}
            annotations: []
            {{- if $pval.imagePullSecret }}
            imagePullSecrets:
            - name: {{ $pval.imagePullSecret }}
            {{- end }}
            nodeProperties: []
          {{- end }}
          {{- end }}
    unclassified:
      sonarglobalconfiguration:
        buildWrapperEnabled: true
        installations:
        - name: sonarqube
          serverUrl: http://sonarqube:9000